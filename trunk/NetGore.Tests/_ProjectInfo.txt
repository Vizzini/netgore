     __       _      ___                     _____            _        
  /\ \ \ ___ | |_   / _ \ ___   _ __  ___   /__   \ ___  ___ | |_  ___ 
 /  \/ // _ \| __| / /_\// _ \ | '__|/ _ \    / /\// _ \/ __|| __|/ __|
/ /\  /|  __/| |_ / /_\\| (_) || |  |  __/ _ / /  |  __/\__ \| |_ \__ \
\_\ \/  \___| \__|\____/ \___/ |_|   \___|(_)\/    \___||___/ \__||___/

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

This project contains all of the unit tests for all parts of NetGore - even the NetGore.Features. It should never be referenced by any other
projects since it doesn't provide anything any projects should need.

What are unit tests? Unit tests, in short, are tests written to make sure things are behaving as expected. Basically, you perform an
operation and check to make sure the state of the object or result of the operation is really what you expect it to
be based on what you did. For example, if you push an object into a new List, you would expect the Count to be equal to 1.
Checking that count being equal to 1 would be a unit test. Another test would be to that the first element in the List is that
object you just put into it. Unit tests are supposed to test specific things for each test. That way, when a test fails, you know
exactly what part is failing. If you have a single unit test that tests every single aspect of a List and it fails, you know the
List is broken somehow, but not exactly what is broken until you look into it more. In reality, this can be quite tedious, so
similar tests are often grouped together in NetGore. The important thing is that as much is tested as possible and that the
tests match up with the expected behavior.

NetGore does not use unit tests for the DemoGame components. You can write your own unit tests for that stuff if you want, but
its obviously your choice. Most people will not even need to ever look at this project. Those who write stuff in any of the
NetGore projects (even NetGore.Features) should add unit tests to check the code they wrote. Likewise, if they change any
existing code in any of the NetGore projects, they should run the unit tests to ensure they did not break anything.

If you want to contribute to NetGore's core but are not sure what to do or are afraid of breaking things, unit tests are a great
way to help out. With unit tests, if you mess up, all you end up doing is writing a test that fails when it shouldn't. Someone will
just come along, notice it failed, and either fix the test for you or delete it if its really messed up. Generally, tests should be
short a quick, but they don't have to be. It also doesn't matter if you write duplicate tests; it doesn't really help much, but
its not like you have to go back and delete it if you realize the test already existed. The more tests we have and the more they cover,
the easier it is to find bugs - either bugs that already exist, or bugs that resulted from someone's changes to the code. We can never
have too many unit tests!