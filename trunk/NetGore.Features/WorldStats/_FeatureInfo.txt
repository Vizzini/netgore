 __    __              _      _  __  _          _        
/ / /\ \ \ ___   _ __ | |  __| |/ _\| |_  __ _ | |_  ___ 
\ \/  \/ // _ \ | '__|| | / _` |\ \ | __|/ _` || __|/ __|
 \  /\  /| (_) || |   | || (_| |_\ \| |_| (_| || |_ \__ \
  \/  \/  \___/ |_|   |_| \__,_|\__/ \__|\__,_| \__||___/

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this feature in general. One is provided for each feature in NetGore and can be found in the feature's
folder in the NetGore.Features project.
-----------------------------------------------------------------------------------------------------------------------------------------------

WorldStats is a feature unique in behavior in that it resides almost exclusively on the server and does not usually do anything that affects
gameplay at all. The whole point of WorldStats is data farming. It is used to keep track of all kinds of things, such as when and where certain
events like a character leveling or being killed takes place, items being consumed, what is purchased from or sold to shops, etc. It also
regularly performs polling of game information to track stuff such as network usage over time.

How this information is used is up to you. You could just ignore it, use it to find potential cheaters or abusers, or even for just generating
displays of "interesting statistics" for individual users. How it is used is up to you, and this feature provides no support in actually
utilizing the farmed data.

WorldStats is not exactly a "clean" implementation. It could perform stat tracking by attaching itself to events, but instead goes for a
very procedural approach of requiring the server to explicitly call the methods. This is intentional. Doing this provides a very light framework
to the WorldStats and makes it very easy to choose what tracking to perform. It also makes it easy to implement your own methods for stat
tracking by overriding the WorldStatsTracker and adding new methods, then referencing that overridden WorldStatsTracker directly instead
of the IWorldStatsTracker interface. Another approach is to just create extension methods for IWorldStatsTracker, allowing you to retain
the reference to IWorldStatsTracker.

Since this is mostly just inserting data into the database, and since all queries need to be defined at a higher level, WorldStats doesn't
really provide a whole lot. Majority of the implementation resides in the server project directly.

-----------------------------------------------------------------------------------------------------------------------------------------------
DATABASE TABLES:
 * world_stats_*

DATABASE PROCEDURES:
 * [None]

CONTENT FILES:
 * [None]