     __       _      ___                        ___             _                          
  /\ \ \ ___ | |_   / _ \ ___   _ __  ___      / __\___   __ _ | |_  _   _  _ __  ___  ___ 
 /  \/ // _ \| __| / /_\// _ \ | '__|/ _ \    / _\ / _ \ / _` || __|| | | || '__|/ _ \/ __|
/ /\  /|  __/| |_ / /_\\| (_) || |  |  __/ _ / /  |  __/| (_| || |_ | |_| || |  |  __/\__ \
\_\ \/  \___| \__|\____/ \___/ |_|   \___|(_)\/    \___| \__,_| \__| \__,_||_|   \___||___/

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

NetGore.Features seems a bit strange at first, but starts to make sense as you use it. It is composed of three major parts:
NetGore.Features, NetGore.Features.Client, and NetGore.Features.Server. This structure is pretty much synonymous with how
it works for DemoGame with the client and server. NetGore.Features provides something shared by both the client and server, while
the other two are specific to their respective part. That is, the server uses NetGore.Features.Server, the client uses
NetGore.Features.Client, and both use NetGore.Features.

So why are these not just in the NetGore project? For one, there has to be the separate projects for the client and server to
allow the client and server to only reference the one they need. While NetGore.Features could just be in NetGore directly, it is
separated for the sake of clarity.

Each folder in NetGore.Features represents a unique feature. For the most part, each feature should be completely separate from
any other feature, though there can be cases where features will expand other features. Each feature always has the namespace of
"NetGore.Features.XXXX", where XXXX is the unique namespace for the feature. Doesn't matter if the code is in the server or client
projects - the same namespace is used for all parts of the feature.

NetGore.Features.Editor is a sort of special-case project. It contains stuff for features in NetGore.Features that is specific to
editors. This is similar to how NetGore.Editor behaves. This project only appears in editor projects, and never in the client
or server. The purpose of this project is to allow developers of features to provide classes that can be used to help edit features.
It also allows you to have features that are purely focused on the editors.

The idea behind this structure is the following:
 * Separation of features: There are minimal, if any, dependencies of features upon one another. If you do not want a certain feature
		and want to remove it from the code completely, its as simple as deleting the 3 root folders for it then removing any references
		of it from your code.
 * Keeping all parts of a feature together: It is a bit hard to completely remove a feature from the engine if it resides in various parts
		of the engine. By being forced to be so tightly together like this, it makes it much more clear what parts belong to it.
 * Handling server- and client-specific work: NetGore.Features is the only place where you can have things specifically for the client
		or specifically for the server. As a result, using these features can require minimal effort for the end user.
 * Optional code: All features are optional and can get quite specific. While the NetGore core is mostly designed for stuff that most
		all games will be using (networking, I/O, rendering, sounds, stats, etc), these features can be incredibly specific. But they are
		also things that you do not need to have a functional game. They are just as their name implies - features.

If it still seems strange to you, think of it as like a plug-in or add-on system. Each feature is quite self-contained, and none of them
are actually required by any core parts of the engine. This makes adding and removing them very easy.

All components in NetGore.Features demand the same quality as being part of the core engine. That is, it needs to be flexible, useful,
stable, well-documented, and well-designed. This is also the place that we hope a lot of high-quality user contributions will end up. Its
an easy way to add to the engine without much fear of breaking anything in the engine.

Inside of each feature folder (in NetGore.Features only), there is a file named _FeatureInfo.txt containing a description of the feature.
Its purpose is the exact same as the _ProjectInfo.txt files, but for explaining the feature. The stylized text used as headers is generated
using the TAAG project: http://patorjk.com/software/taag/. Just select the "Ogre" style and untick "Smush Letters Together".