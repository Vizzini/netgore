   __                     _      ___                      _                   
  /__\__   __ ___  _ __  | |_   / __\ ___   _   _  _ __  | |_  ___  _ __  ___ 
 /_\  \ \ / // _ \| '_ \ | __| / /   / _ \ | | | || '_ \ | __|/ _ \| '__|/ __|
//__   \ V /|  __/| | | || |_ / /___| (_) || |_| || | | || |_|  __/| |   \__ \
\__/    \_/  \___||_| |_| \__|\____/ \___/  \__,_||_| |_| \__|\___||_|   |___/

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this feature in general. One is provided for each feature in NetGore and can be found in the feature's
folder in the NetGore.Features project.
-----------------------------------------------------------------------------------------------------------------------------------------------

NOTICE: Since EventCounters try to run almost completely separately from the rest of the server for performance reasons, there is a
chance that events might not be updated. This will typically only happen for a table that changes during runtime (such as `character`),
and the event was for an object that was very recently added or removed. If the server crashes, up to the last 5 minutes (by default)
of counter increments can fail to be inserted. This is rarely a problem since counters should not require absolutely perfect accuracy.
If you do want absolute ACID compliance for whatever reason, you will need to use a different approach.

EventCounters are similar to WorldStats, but far more simple, easier to use, and provide significantly better performance (should impose
no noticeable performance overhead even with a large number of counters defined). While WorldStats tracks details on specific events, and
does the default implementation does provide some counters, EventCounters is even more general. Every EventCounter is structured in the same way:
there is a single object identifier (typically in the form of an integer), a single event identifier (typically in the form of an enum), and
a counter. With WorldStats, you can have counters that track detailed information like how many times a user has killed a specific NPC, but
not with EventCounters. With EventCounters, you'd only be able to have how many times a user has killed any NPC.

It is because the EventCounters are so simplistic and uniform in nature that they are able to perform so well and be very easy to implement.
WorldStats requires a lot of work generating a lot of tables and a custom query for every single unique event. Since EventCounters
simply increments a relatively small set of values, it is able to keep an in-memory cache of values instead of writing out to the database
on every single event. By default, each EventCounter instance will flush to the database only once every 5 minutes. Multiple increments to
a counter of the same object and event then end up as a single query.

Detailed cost analysis:

When calling Increment() on an EventCounter, you are simply incrementing a counter in memory, not making an actual query. Basically,
what happens is a lock is acquired, the value is added to the existing value in memory (if exists), then the lock is released. A query
will have to be executed immediately if the value ever overflows (internal values are stored as integers to significantly reduce memory usage),
but that is very unlikely to happen with 5 minute flush rate. The most expensive operations here are using a lock and performing the
dictionary look-up, but that is still fast enough to be done well over a million times per second.

When it comes time to flush, this should have almost no impact on the rest of the server's performance, even if the flushing itself takes
a very long time. On a separate thread, the counter cache is swapped out with a new instance so it can go back to incrementing. The
flushing then resumes on that thread by executing every query (which ends up queueing them in the IQueryRunner, which executes them
on another background thread). Since EventCounters never executes a query that blocks, the IQueryRunner will never have to stall due
to flushing. Also, since all the tables used by EventCounters are exclusively for EventCounters, it is cheap to create a separate database
connection specifically for EventCounters. This lets the EventCounters have their own IQueryRunner and doesn't end up interferring with
more important queries.

It is precisely this reason why EventCounters even exist. WorldStats can be quite expensive and generate a lot of records, but EventCounters
are so cheap that even low-end servers can include them without concern.

-----------------------------------------------------------------------------------------------------------------------------------------------
DATABASE TABLES:
 * event_counters_*

DATABASE PROCEDURES:
 * [None]

CONTENT FILES:
 * [None]