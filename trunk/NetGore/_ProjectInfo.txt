     __       _      ___                  
  /\ \ \ ___ | |_   / _ \ ___   _ __  ___ 
 /  \/ // _ \| __| / /_\// _ \ | '__|/ _ \
/ /\  /|  __/| |_ / /_\\| (_) || |  |  __/
\_\ \/  \___| \__|\____/ \___/ |_|   \___|

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

The NetGore project is the core of the whole engine. Pretty much every project will reference this project. It also contains
references to the DLLs needed by the engine so that, whenever you reference this project, it will automatically handle
copying the DLLs to the destination for you. This project contains all classes that make sense to have included in all
of the DemoGame projects. For example, unit tests shouldn't be included in any other project so they all reside in NetGore.Tests.
The client and many editors don't need to talk to the database, so those are included in NetGore.Db. And obviously stuff specific
for editors isn't needed by either the client or server. The reason for this separation is the same as why it is done for DemoGame:
you don't want to have dependencies in the client and server for stuff that you do not need. Doing so just increases the complexity
of the code, size of the builds, and results in more dependencies.

As you can imagine, this project is huge and contains a ton of code. Since this code is part of the core engine, its important that it
all be highly flexible so that people using NetGore can tweak it as much as they need, while at the same time having good performance
and being easy to use. However, it is exactly this reason why its hard to add code into the NetGore core and that a lot of stuff
still remains in the DemoGame projects.

Unlike the other projects, the NetGore project contains a bunch of root-level folders and each root-level folder is its own namespace,
with the exception of Core. The reason for this is that there is just so much in here. You can think of it like each folder is a separate project,
but without the annoyance of having a ton of extra projects.

The following is a description of each of these folders:
 * AI: All of the base components of the artificial intelligence, along with AI-related concepts such as pathfinding.
 * Audio: Contains everything related to playing and managing sound effects and music.
 * Collections: All the publicly-exposed collections of various purposes, such as object pools, caches, and specialized lists, stacks,
		and queues. All parts of NetGore and the DemoGame use these collections for various purposes.
 * Content: Everything related to content management. Does not include anything related to actually "using" the content, or even what
		kind of content exists. For the most part, this is just for strongly-typing content (instead of just referencing everything
		by a string and hoping the string is formatted properly) and for controlling the loading of content into and out of memory.
 * Core: This is the one folder without its own namespace: it just uses "NetGore". The core can be thought of everything not worthy of
		its own namespace and so common that it deserves being part of the root namespcae. A large amount of this is helper classes
		and custom value types.
 * Graphics: Everything related to graphics, from simple drawing of sprites to the particle engine and GUI system. This is quite a large
		part of the engine since NetGore provides a lot of help to make drawing incredibly easy and provides built-in support for things
		often found in games like a GUI system and particle engines.
 * IO: Everything related to writing to and reading from some form of storage. Here is where stuff you see all over the place at higher
		levels, such as IValueReader/IValueWriter, ContentPaths, SyncValue, and BitStream all come from. Other than the actual IO operations,
		this section provides tools for referring to certain paths in a standardized way (SpriteCategorization, PathString, ContentPaths...)
		and handling performing or setting up IO for common stuff (settings, temp files, game messages...).
 * Network: All of the networking stuff. For the most part, you only really see the IIPSocket, SocketManager, and PacketWriter classes along
		with the MessageHandler attribute. However, a lot of work is done to ensure that the networking is simple, scalable, high-performance,
		and implements reliable and unreliable channels seamlessly.
 * NPCChat: The base classes related to the NPC chat dialog system. Should be in NetGore.Features, but was added way before that ever existed.
 * Scripting: Everything related to scripting. NetGore only supports scripting with C#, VB.NET, and JScript by default. This handles the loading,
		caching, and invoking of scripts. While scripting is provided, its not a big focus of NetGore. While we do understand that scripting
		can be very nice to have, it isn't exactly necessary in a fully open-source engine where the only people writing code are those
		who release it (in opposed to applications that let the end-user write scripts). Implementing scripting in a way that would make it
		much better than just writing code normally takes a ton of work and time that is better spent on other things.
 * SFML: All of the bindings to SFML, along with classes and structures related to SFML but are not provided by SFML by default. Each
		of the folders in \SFML\ also contain a \NetGore\ folder. Outside of \NetGore\ is the .NET bindings provided by SFML by default that
		have been modified only minimally. Inside of \NetGore\ is code that is not part of SFML. Some of this is useful classes and structures
		that were used back when NetGore used XNA, while others are custom-written classes to expand some parts of SFML (such as by
		providing lazy content loading). You should never need to touch this directory, even as a NetGore developer. Spodi handles all the SFML
		updates since the process of updating is quite specific and SFML updates are quite infrequent.
 * Stats: Everything related to stats for characters in games. This has nothing to do with statistics for stuff like the network or
		resource usage. This is the actual game stats, like strength, agility, intelligence, etc.
 * World: Everything related to the actual virtual world, including the world itself, maps (the individual parts that make up a world), and
		entities (the individual objects that reside on maps and occupy space). Also contains classes related to handling these entities, such
		as the spatial manager.