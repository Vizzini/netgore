<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Blank" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Blank.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ExplosionRefractionEffectShader" xml:space="preserve">
    <value>// The distance multiplier to apply to the values unpacked from channels to get the offset. This decreases our resolution,
// giving us a choppier image, but increases our range. Lower values give higher resolution but require smaller distances.
// This MUST be the same in all the refraction effects!
const float DistanceMultiplier = 2.0;

// The value of the reflection channels that will be used to not perform any reflection. Having this non-zero allows us to
// reflect in both directions instead of just borrowing pixels in one direction. Of course, this also halves our max distance.
// Logically, this value is 1/2. However, a slightly different number is used due to the behavior of floating-point numbers.
// This MUST be the same in all the refraction effects!
const float BaseOffset = 0.4981;

// The maximum alpha value allowed.
const float MaxAlpha = 1.00;

// The alpha multiplier. Greater values keep at MaxAlpha for longer, but fade out much faster.
// Too low of values will just end up not reaching MaxAlpha, or not reaching it for long.
const float AlphaMultiplier = 2.0;

// A multiplier used on the distortion vector values to determine the intensity. A value of 1.0f will result
// in using a distortion equal to that in the source noise image. Its recommended you manually edit the noise
// texture's R and G channels to alter the intensity, but this value can still be used to give different intensities
// to the same texture.
uniform float Intensity;

// The maximum expected age of the effect. Unit does not matter as long as it is consistent.
uniform float MaxAge;

// The current age of the effect. Unit does not matter as long as it is consistent.
uniform float Age;

// The texture used to generate the noise.
uniform sampler2D NoiseTexture;

void main (void)
{
	vec4 noiseVec;
	vec2 noiseXYVec;
	float a;

	// Get the noise from the texture
	noiseVec = texture2D(NoiseTexture, gl_TexCoord[0].st);

	// Calculate the noise vector
	noiseXYVec = (noiseVec.xy / DistanceMultiplier) * Intensity;

	// Calculate the alpha, which will let us fade out smoothly before the effect ends
	a = clamp(noiseVec.a * AlphaMultiplier * ((MaxAge - Age) / MaxAge), 0.0, MaxAlpha);

	// Apply the coloring, using the transformation directly and unaltered from the noise texture
	gl_FragColor = vec4(noiseXYVec.x, noiseXYVec.y, 0.0, a);
}</value>
    <comment>The GLSL code for the ExplosionRefractionEffect's default shader.</comment>
  </data>
  <data name="Joint" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Joint.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Lightbulb" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Lightbulb.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Move" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Move.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Resize" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Resize.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Triangle" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Triangle.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="WaterRefractionEffectShader" xml:space="preserve">
    <value>// The distance multiplier to apply to the values unpacked from channels to get the offset. This decreases our resolution,
// giving us a choppier image, but increases our range. Lower values give higher resolution but require smaller distances.
// This MUST be the same in all the refraction effects!
const float DistanceMultiplier = 2.0;

// The value of the reflection channels that will be used to not perform any reflection. Having this non-zero allows us to
// reflect in both directions instead of just borrowing pixels in one direction. Of course, this also halves our max distance.
// Logically, this value is 1/2. However, a slightly different number is used due to the behavior of floating-point numbers.
// This MUST be the same in all the refraction effects!
const float BaseOffset = 0.4981;

// The texture used to create the waves.
uniform sampler2D WaveNoiseTexture;

// The intensity of the waves. Greater value = higher intensity. Changing the wave noise texture itself is also
// a good way to go about altering the intensity and just the overall pattern of the waves.
uniform float WaveIntensity;

// The current time in milliseconds.
uniform float Time;

// The wave speed multiplier. The greater the value, the faster the waves move.
uniform float WaveSpeedMultiplier;

// The alpha value of the water. A lower alpha makes the water less transparent, making it harder to see the original
// graphics under it. This is just a modifier of the alpha of the wave noise texture, allowing you to give different
// alpha values without having to change the texture.
uniform float WaterAlphaModifier;

// The ratio of the size of the drawn image over the height of the texture. That is, DrawHeight / TextureHeight.
// For example, if you draw a 512x512 texture with a size of 256x256 pixels, this value will be 0.5.
uniform float DrawTextureHeightRatio;

// The amount to magnify the water's refraction. 0.5f results in the images in the water being twice the height of
// the real world (and thus shows half the world), while 2.0f results in images in the water being half the height
// of the real world (and shows twice as much).
uniform float Magnification;

void main (void)
{
	vec4 noiseVec;
	vec2 waveNoiseOffsetVec;
	vec2 newRG;
    float refractValue;

	// Get the noise vector for the waves, using the time so we can move, and mod to stay in the range of (0.0, 1.0).
	waveNoiseOffsetVec = mod(gl_TexCoord[0].st + (Time * 0.0005 * WaveSpeedMultiplier), 1.0);

	// Add the noise from the waves.
	noiseVec = texture2D(WaveNoiseTexture, waveNoiseOffsetVec).rgba;

	// Calculate the red and green channels in the same way. Simply, we take the base offset then add the noise from the water.
	newRG = BaseOffset + (noiseVec.rg * WaveIntensity);

	// For the vertical offset, we also need to add the texture offset, which allows us to properly reflect. Adding is used
	// because we reflect what is above us.
    refractValue = (gl_TexCoord[0].y * DrawTextureHeightRatio) / DistanceMultiplier;
	newRG.y += refractValue * (1.0 + Magnification);

	// Clamp it all into the range of (0.0, 1.0)
	newRG = clamp(newRG, 0.0, 1.0);

	// Apply the color.
	gl_FragColor = vec4(newRG.x, newRG.y, 0.0, clamp(noiseVec.a - WaterAlphaModifier, 0.0, 1.0));
}</value>
    <comment>The GLSL code for the WaterRefractionEffect's default shader.</comment>
  </data>
</root>