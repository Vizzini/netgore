<?xml version="1.0"?>
<configuration>
  <configSections>
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
      <section name="NetGore.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false"/>
    </sectionGroup>
  </configSections>
  <applicationSettings>
    <NetGore.Properties.Settings>
      <setting name="ExplosionRefractionEffectShader" serializeAs="String">
        <value>
          // The distance multiplier to apply to the values unpacked from channels to get the offset. This decreases our resolution,
          // giving us a choppier image, but increases our range. Lower values give higher resolution but require smaller distances.
          // This MUST be the same in all the refraction effects!
          const float DistanceMultiplier = 2.0;

          // The value of the reflection channels that will be used to not perform any reflection. Having this non-zero allows us to
          // reflect in both directions instead of just borrowing pixels in one direction. Of course, this also halves our max distance.
          // Logically, this value is 1/2. However, a slightly different number is used due to the behavior of floating-point numbers.
          // This MUST be the same in all the refraction effects!
          const float BaseOffset = 0.4981;

          // The maximum alpha value allowed.
          const float MaxAlpha = 1.00;

          // The alpha multiplier. Greater values keep at MaxAlpha for longer, but fade out much faster.
          // Too low of values will just end up not reaching MaxAlpha, or not reaching it for long.
          const float AlphaMultiplier = 2.0;

          // A multiplier used on the distortion vector values to determine the intensity. A value of 1.0f will result
          // in using a distortion equal to that in the source noise image. Its recommended you manually edit the noise
          // texture's R and G channels to alter the intensity, but this value can still be used to give different intensities
          // to the same texture.
          uniform float Intensity = 0.1;

          // The maximum expected age of the effect. Unit does not matter as long as it is consistent.
          uniform float MaxAge = 2000.0;

          // The current age of the effect. Unit does not matter as long as it is consistent.
          uniform float Age;

          // The texture used to generate the noise.
          uniform sampler2D NoiseTexture;

          void main (void)
          {
          vec4 noiseVec;
          vec2 noiseXYVec;
          float a;

          // Get the noise from the texture
          noiseVec = texture2D(NoiseTexture, gl_TexCoord[0].st);

          // Calculate the noise vector
          noiseXYVec = (noiseVec.xy / DistanceMultiplier) * Intensity;

          // Calculate the alpha, which will let us fade out smoothly before the effect ends
          a = clamp(noiseVec.a * AlphaMultiplier * ((MaxAge - Age) / MaxAge), 0.0f, MaxAlpha);

          // Apply the coloring, using the transformation directly and unaltered from the noise texture
          gl_FragColor = vec4(noiseXYVec.x, noiseXYVec.y, 0.0f, a);
          }
        </value>
      </setting>
      <setting name="WaterRefractionEffectShader" serializeAs="String">
        <value>
          // The distance multiplier to apply to the values unpacked from channels to get the offset. This decreases our resolution,
          // giving us a choppier image, but increases our range. Lower values give higher resolution but require smaller distances.
          // This MUST be the same in all the refraction effects!
          const float DistanceMultiplier = 2.0;

          // The value of the reflection channels that will be used to not perform any reflection. Having this non-zero allows us to
          // reflect in both directions instead of just borrowing pixels in one direction. Of course, this also halves our max distance.
          // Logically, this value is 1/2. However, a slightly different number is used due to the behavior of floating-point numbers.
          // This MUST be the same in all the refraction effects!
          const float BaseOffset = 0.4981;

          // The texture used to create the waves.
          uniform sampler2D WaveNoiseTexture;

          // The intensity of the waves. Greater value = higher intensity. Changing the wave noise texture itself is also
          // a good way to go about altering the intensity and just the overall pattern of the waves.
          uniform float WaveIntensity = 0.01;

          // The current time in milliseconds.
          uniform float Time;

          // The wave speed multiplier. The greater the value, the faster the waves move.
          uniform float WaveSpeedMultiplier = 0.5;

          // The alpha value of the water. A lower alpha makes the water less transparent, making it harder to see the original
          // graphics under it. This is just a modifier of the alpha of the wave noise texture, allowing you to give different
          // alpha values without having to change the texture.
          uniform float WaterAlphaModifier = 0.38;

          // The ratio of the size of the drawn image over the height of the texture. That is, DrawHeight / TextureHeight.
          // For example, if you draw a 512x512 texture with a size of 256x256 pixels, this value will be 0.5f.
          uniform float DrawTextureHeightRatio;

          // The amount to magnify the water's refraction. 0.5f results in the images in the water being twice the height of
          // the real world (and thus shows half the world), while 2.0f results in images in the water being half the height
          // of the real world (and shows twice as much).
          uniform float Magnification = 1.0;

          void main (void)
          {
          vec4 noiseVec;
          vec2 waveNoiseOffsetVec;
          vec2 newRG;
          float refractValue;

          // Get the noise vector for the waves, using the time so we can move, and mod to stay in the range of (0.0f, 1.0f).
          waveNoiseOffsetVec = mod(gl_TexCoord[0].st + (Time * 0.0005f * WaveSpeedMultiplier), 1.0f);

          // Add the noise from the waves.
          noiseVec = texture2D(WaveNoiseTexture, waveNoiseOffsetVec).rgba;

          // Calculate the red and green channels in the same way. Simply, we take the base offset then add the noise from the water.
          newRG = BaseOffset + (noiseVec.rg * WaveIntensity);

          // For the vertical offset, we also need to add the texture offset, which allows us to properly reflect. Adding is used
          // because we reflect what is above us.
          refractValue = (gl_TexCoord[0].y * DrawTextureHeightRatio) / DistanceMultiplier;
          newRG.y += refractValue * (1.0 + Magnification);

          // Clamp it all into the range of (0.0f, 1.0f)
          newRG = clamp(newRG, 0.0f, 1.0f);

          // Apply the color.
          gl_FragColor = vec4(newRG.x, newRG.y, 0.0f, clamp(noiseVec.a - WaterAlphaModifier, 0.0f, 1.0f));
          }
          // The distance multiplier to apply to the values unpacked from channels to get the offset. This decreases our resolution,
          // giving us a choppier image, but increases our range. Lower values give higher resolution but require smaller distances.
          // This MUST be the same in all the refraction effects!
          const float DistanceMultiplier = 2.0;

          // The value of the reflection channels that will be used to not perform any reflection. Having this non-zero allows us to
          // reflect in both directions instead of just borrowing pixels in one direction. Of course, this also halves our max distance.
          // Logically, this value is 1/2. However, a slightly different number is used due to the behavior of floating-point numbers.
          // This MUST be the same in all the refraction effects!
          const float BaseOffset = 0.4981;

          // The texture used to create the waves.
          uniform sampler2D WaveNoiseTexture;

          // The intensity of the waves. Greater value = higher intensity. Changing the wave noise texture itself is also
          // a good way to go about altering the intensity and just the overall pattern of the waves.
          uniform float WaveIntensity = 0.01;

          // The current time in milliseconds.
          uniform float Time;

          // The wave speed multiplier. The greater the value, the faster the waves move.
          uniform float WaveSpeedMultiplier = 0.5;

          // The alpha value of the water. A lower alpha makes the water less transparent, making it harder to see the original
          // graphics under it. This is just a modifier of the alpha of the wave noise texture, allowing you to give different
          // alpha values without having to change the texture.
          uniform float WaterAlphaModifier = 0.38;

          // The ratio of the size of the drawn image over the height of the texture. That is, DrawHeight / TextureHeight.
          // For example, if you draw a 512x512 texture with a size of 256x256 pixels, this value will be 0.5f.
          uniform float DrawTextureHeightRatio;

          // The amount to magnify the water's refraction. 0.5f results in the images in the water being twice the height of
          // the real world (and thus shows half the world), while 2.0f results in images in the water being half the height
          // of the real world (and shows twice as much).
          uniform float Magnification = 1.0;

          void main (void)
          {
          vec4 noiseVec;
          vec2 waveNoiseOffsetVec;
          vec2 newRG;
          float refractValue;

          // Get the noise vector for the waves, using the time so we can move, and mod to stay in the range of (0.0f, 1.0f).
          waveNoiseOffsetVec = mod(gl_TexCoord[0].st + (Time * 0.0005f * WaveSpeedMultiplier), 1.0f);

          // Add the noise from the waves.
          noiseVec = texture2D(WaveNoiseTexture, waveNoiseOffsetVec).rgba;

          // Calculate the red and green channels in the same way. Simply, we take the base offset then add the noise from the water.
          newRG = BaseOffset + (noiseVec.rg * WaveIntensity);

          // For the vertical offset, we also need to add the texture offset, which allows us to properly reflect. Adding is used
          // because we reflect what is above us.
          refractValue = (gl_TexCoord[0].y * DrawTextureHeightRatio) / DistanceMultiplier;
          newRG.y += refractValue * (1.0 + Magnification);

          // Clamp it all into the range of (0.0f, 1.0f)
          newRG = clamp(newRG, 0.0f, 1.0f);

          // Apply the color.
          gl_FragColor = vec4(newRG.x, newRG.y, 0.0f, clamp(noiseVec.a - WaterAlphaModifier, 0.0f, 1.0f));
          }
        </value>
      </setting>
    </NetGore.Properties.Settings>
  </applicationSettings>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0,Profile=Client"/></startup></configuration>
