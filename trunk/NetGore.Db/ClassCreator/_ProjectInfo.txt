     __       _      ___                         ___  _          ___  _                     ___                   _               
  /\ \ \ ___ | |_   / _ \ ___   _ __  ___       /   \| |__      / __\| |  __ _  ___  ___   / __\_ __  ___   __ _ | |_  ___   _ __ 
 /  \/ // _ \| __| / /_\// _ \ | '__|/ _ \     / /\ /| '_ \    / /   | | / _` |/ __|/ __| / /  | '__|/ _ \ / _` || __|/ _ \ | '__|
/ /\  /|  __/| |_ / /_\\| (_) || |  |  __/ _  / /_// | |_) |_ / /___ | || (_| |\__ \\__ \/ /___| |  |  __/| (_| || |_| (_) || |   
\_\ \/  \___| \__|\____/ \___/ |_|   \___|(_)/___,'  |_.__/(_)\____/ |_| \__,_||___/|___/\____/|_|   \___| \__,_| \__|\___/ |_|   

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

NOTE: This was once its own project (NetGore.Db.ClassCreator), but now resides in NetGore.Db. This change was due the projects being
relatively similar (both database related), because they share the same references, and they often ended up being referenced together.

The NetGore.Db.ClassCreator project is a bit of a strange one. The sole purpose of it is to generate code. It works by
connecting to the database you specify and generating code for the schema. This is where all the code files that reside in
a \DbObjs\ folder comes from. What is the point of all of this? Type safety and usability. Microsoft provides some similar technologies,
but none of them really seemed to work well for NetGore's usage. They either tried to do too much (like the Entity Framework) or spit
out classes in a specific way and allowed little or no room for customization.

When you generate the code for the database objects, a few things are spit out:
 * Table interfaces: Every table and view results in one interface being generated for the table. These interfaces are especially useful
		since, if you implement them on any object, you can now use that object to write to the database in just a few lines of code. No
		having to manually populate some temporary object and set every property.
 * Table classes: Every table also spits out a class which implements the respective interface and provides a basic, general implementation
		of the interface. Using these, you can basically read and write objects to the database in just a few lines of code.
 * Table extension methods: Every table also spits out a class of extension methods for the interfaces that provide extra features such
		as reading and writing all values to/from different collections. It is because of these extension methods that you can read
		or write whole objects to/from the database so easily.
 * ColumnMetadata: One of these classes are always generated. It just provides a class that is used to hold the metadata for database
		columns. This way you can read the schema of your database in a generic, standardized, and type-safe way.
 * CostEnumDictionaries: One of these are generated for each collection you create for the generated code. It simply provides the
		look-up logic for translating an enum value to/from a dictionary. More about these collections below.

The ClassCreator also allows customization in the following ways:
 * Renaming: Publicly exposed properties can be renamed however you want. By default, DemoGame just makes use of this to correct issues
		with the name casing (capitalization).
 * Type aliasing: You can expose a specific type instead of the generic type from the database. For example, NetGore provides a lot of custom
		structs for IDs that look like an int, smell like an int, but internally, are not always an int. This is done to make it very easy to
		expand the storage size for value types. It also makes it much more clear on what the value is. An int can be any kind of int for
		any purpose, but a MapID is always going to be an ID for a map. For type aliasing to work, the alias type needs to be both valid
		and able to cast to/from the native type through an explicit type.
 * Collections: You can combine multiple columns into a single collection. Accessing these values is done by a key instead of by typing out
		the name explicitly. This is used by the DemoGame by default to create a collection for stats. If it did not do this, you would have
		a property for every single stat. Not only would that be a lot of properties, it would require writing your own giant switch statement
		to find the correct value. This is the most powerful part of the customization.