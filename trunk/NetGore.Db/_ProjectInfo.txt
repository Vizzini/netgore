     __       _      ___                         ___  _     
  /\ \ \ ___ | |_   / _ \ ___   _ __  ___       /   \| |__  
 /  \/ // _ \| __| / /_\// _ \ | '__|/ _ \     / /\ /| '_ \ 
/ /\  /|  __/| |_ / /_\\| (_) || |  |  __/ _  / /_// | |_) |
\_\ \/  \___| \__|\____/ \___/ |_|   \___|(_)/___,'  |_.__/ 

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

NetGore.Db contains all the database-specific stuff. It handles everything from opening the connection to providing
a clean way to creating queries while retaining type safety, usage-checking, and maintainability. By default, NetGore just
supports MySql, but can be easily modified to support other database engines.

NetGore.Db tries to abstract and automate how things work as much as it can. If you have seen the queries that come with the engine, you
probably noticed that you don't really have control over anything other than writing the query, stating what parameters there are, setting
the parameters, and retreiving the results. By doing this, NetGore can optimize the database operations under the hood, and this is
exactly what it does. There are a bunch of object pools for various things to reduce the amount of garbage created, locks
to ensure thread safety, caching for performance, etc. You don't even usually control a single connection to the database but
rather an IDbController which handles pooling connections under the hood.

There is a lot exposed by NetGore.Db to allow you to use database interaction in ways other than used by default. Its not recommended
to do that, but there are times that it is useful to have more control. But for the most part, users will only need to use the following:
 * IDbController: Create this with MySqlDbController, then only pass the IDbController reference around. This interface is what you use
		to grab queries so you can execute them.
 * DbQueryNonReader/DbQueryReader: They both do the same thing - execute a query. However, the DbQueryNonReader is optimized to make it
		as easy as possible to create a query that does not need to do any reading. Reading the results for a query requires a little more
		work for implementing, which is why the separation exists.