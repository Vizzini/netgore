    ___                           ___                        
   /   \ ___  _ __ ___    ___    / _ \ __ _  _ __ ___    ___ 
  / /\ // _ \| '_ ` _ \  / _ \  / /_\// _` || '_ ` _ \  / _ \
 / /_//|  __/| | | | | || (_) |/ /_\\| (_| || | | | | ||  __/
/___,'  \___||_| |_| |_| \___/ \____/ \__,_||_| |_| |_| \___|

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

DemoGame is the core of all parts of the demo game. The name "DemoGame" comes from what it is - a demo of a game
made with NetGore. Ideally, all the good and useful code for NetGore would reside in the core engine (projects that start
with "NetGore"). In reality, this is difficult to accomplish while still providing high flexibility and performance.

DemoGame can be thought of as the gap between your game and NetGore. Inside here, you will add stuff that should be "shared"
between the client and server. All DemoGame projects will reference this project. As a result, you should never add references
to this project that are not needed by both the client and server. Adding code not needed by both is okay when it cannot be avoided,
but project references are not okay. For example, if you add a reference to NetGore.Graphics in here, that will mean that
the server will have to have the graphics libraries. Likewise, if you reference NetGore.Db in here, the client (and all editors) will
end up needing to be distributed with the database libraries.

Some of the important pieces in this project are:
 * Packet headers: Note that the actual construction of the packets is not in here, just the headers.
 * Base entity classes: This project often provides the abstract base class, and the server and client implement the parts they need.
		The server will often add the behavior logic, and the client just mostly adds visual stuff.
 * Shared enums: GameMessages, StatTypes, StatusEffects, etc.
 * DbObjs interfaces + a few tables: When you have a database table file in here, it allows you to serialize rows over the network easily.