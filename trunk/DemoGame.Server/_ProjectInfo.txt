    ___                           ___                            __                               
   /   \ ___  _ __ ___    ___    / _ \ __ _  _ __ ___    ___    / _\  ___  _ __ __   __ ___  _ __ 
  / /\ // _ \| '_ ` _ \  / _ \  / /_\// _` || '_ ` _ \  / _ \   \ \  / _ \| '__|\ \ / // _ \| '__|
 / /_//|  __/| | | | | || (_) |/ /_\\| (_| || | | | | ||  __/ _ _\ \|  __/| |    \ V /|  __/| |   
/___,'  \___||_| |_| |_| \___/ \____/ \__,_||_| |_| |_| \___|(_)\__/ \___||_|     \_/  \___||_|   

-----------------------------------------------------------------------------------------------------------------------------------------------
This file contains information about this project in general. One is provided for each project in NetGore, and it is recommended you read them
all to get a basic understanding of NetGore's code structure.
-----------------------------------------------------------------------------------------------------------------------------------------------

DemoGame.Server is what actually creates the server binary and contains all the server-specific logic. Since
the client doesn't really "know" much about the high-level aspects of the game (such as how skills and stats work, how
damage is calculated, etc), this is also where a huge amount of the higher-level game logic resides.

The server is quite huge and contains a lot of different pieces to make a game. The most critical of these are:
 * High-level game logic: What happens when you die? How much damage do you do? What happens when I try to equip an item? The server
		is the one that has to answer all these questions, not the client. This makes up a huge portion of the code since you have
		to define what happens for all these different actions.
 * DbObjs: A few database table code files generated from DemoGame.DbClassCreator, along with all the interfaces, end up in DemoGame
		so the client and server can use them as an easy to serialize data. All the rest of these tables, plus extension methods to
		ease database I/O, reside here on the server. This is a huge amount of code, but all auto-generated.
 * Queries: Most all queries are on the server and reside in \Queries\. There are a ton of queries that have to be made to communicate
		with the database. As a result, there is a lot of code related to these queries. While it may seem incredibly inefficient
		with how all queries are their own class, this is done since it greatly improves performance, stability/type safety, and
		maintainability.